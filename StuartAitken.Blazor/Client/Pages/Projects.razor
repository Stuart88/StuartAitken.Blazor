@inherits CustomComponentBase

@page "/projects"

<PageTitle>Stuart Aitken - Projects</PageTitle>

<div>
	<MudIconButton OnClick="@(() => Navigation.NavigateTo(Routes.Pages.Index))"
				   Icon="@Icons.Rounded.ArrowBack" Color="Color.Info" />


	.. / Projects
</div>

<h1>Projects</h1>

<MudTable Items="@(projects)"
		  Hover="true"
		  Class="projects-table"
		  Breakpoint="Breakpoint.None"
		  Style="@($"background-color:{Colors.Grey.Lighten5}")"
		  Loading="@(this.loading)"
		  T="Project"
		  Filter="FilterFunc"
		  @bind-SelectedItem="selectedProject"
		  OnRowClick="RowClickEvent"
		  LoadingProgressColor="Color.Info">
	<ToolBarContent>
		<MudAutocomplete T="string"
						 Label="Filter Name, Type, Tech"
						 Class="mt-0"
						 @bind-Value="filterString"
						 SearchFunc="@AutoCompleteSearch"
						 ResetValueOnEmptyText="true"
						 CoerceText="false"
						 CoerceValue="true"
						 Adornment="Adornment.Start"
						 AdornmentIcon="@Icons.Material.Filled.Search"
						 IconSize="Size.Medium"
						 AdornmentColor="Color.Primary" />

		<MudIconButton OnClick="@(async () => this.LoadProjectsList())"
					   Icon="@Icons.Rounded.Refresh" Color="Color.Secondary" Variant="Variant.Filled" />

		@if (this.IsAdmin)
		{
			<MudIconButton OnClick="@(() => this.Navigation.NavigateTo($"{Routes.Pages.EditProject}/0"))"
					   Icon="@Icons.Rounded.Add" Color="Color.Tertiary" Variant="Variant.Filled" />
		}
	</ToolBarContent>
	<HeaderContent>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<Project, object>(x=>x.ProjectDate)"
							   InitialDirection="SortDirection.Descending">
				Project Date
			</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<Project, object>(x=>x.Name)">
				Name
			</MudTableSortLabel>
		</MudTh>
		<MudHidden Breakpoint="Breakpoint.SmAndDown">
			<MudTh>
				<MudTableSortLabel SortBy="new Func<Project, object>(x=>x.ProjectDurationDays)">
					Duration
				</MudTableSortLabel>
			</MudTh>
			<MudTh>
				Types
			</MudTh>
			<MudTh>
				Tech
			</MudTh>
			<MudTh>
				@*for action btns*@
			</MudTh>
		</MudHidden>
	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="ProjectDate" Style="width:140px">@context.ProjectDate.ToString("yyyy MMM")</MudTd>
		<MudTd DataLabel="Name">
			<MudChip Style="@($"background-color:{Colors.Blue.Lighten5}")">
				@context.Name
			</MudChip>
		</MudTd>
		<MudHidden Breakpoint="Breakpoint.SmAndDown">
			<MudTd DataLabel="Duration" Style="width:100px">@StringHelpers.MakePresentableDuration(context)</MudTd>
			<MudTd DataLabel="Types" Style="width:100px">
				@foreach (var type in context.Type.Split(", "))
				{
					<ProjectIcon Src="@StringHelpers.TypeIconSrc(type)" Tooltip="@type" />
				}
			</MudTd>
			<MudTd DataLabel="Tech">
				@foreach (var tech in context.Tech.Split(", ").OrderBy(i => i))
				{
					<ProjectIcon Src="@StringHelpers.TechIconSrc(tech)" Tooltip="@tech" />
				}
			</MudTd>
			<MudTd>
				<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" VerticalAlign>
					@if (this.IsAdmin)
					{
						<MudIconButton Variant="Variant.Filled"
								   Style="@($"background-color:{Colors.Green.Default};color:{Colors.Grey.Lighten5}")"
								   Size="Size.Small"
								   OnClick="@(() => this.Navigation.NavigateTo($"{Routes.Pages.EditProject}/{context.ID}"))"
								   Icon="@Icons.Rounded.Edit">
						</MudIconButton>
						<MudIconButton Variant="Variant.Filled"
								   Style="@($"background-color:{Colors.Red.Default};color:{Colors.Red.Lighten5}")"
								   Size="Size.Small"
								   OnClick="@(() => this.OnDeleteClicked(context))"
								   Icon="@Icons.Rounded.Delete">
						</MudIconButton>
					}
					<MudButton Variant="Variant.Filled"
							   Style="@($"background-color:{Colors.Blue.Default};color:{Colors.Grey.Lighten5}")"
							   Size="Size.Small"
							   OnClick="@(() => this.Navigation.NavigateTo($"{Routes.Pages.Projects}/{context.ID}"))">
						View
					</MudButton>
				</MudButtonGroup>

			</MudTd>
		</MudHidden>
	</RowTemplate>
</MudTable>


@code {

	[Parameter]
	public int? ProjectId { get; set; }

	private IEnumerable<Project> projects = new List<Project>();
	private string filterString = "";
	private Project? selectedProject = null;
	private List<string> autoCompleteList = new();
	private bool loading = true;

	protected override async Task OnInitializedAsync()
	{
		await this.LoadProjectsList();

		await base.OnInitializedAsync();
	}

	private async Task LoadProjectsList()
	{
		this.loading = true;
		this.projects = new List<Project>();
		this.StateHasChanged();

		var data = await Http.GetFromJsonAsync<IEnumerable<Project>>(Routes.Api.Projects_All);

		if (data == null)
		{
			Snackbar.Add("Found no data!", Severity.Error);
		}
		else
		{
			projects = data;

			var projectNames = projects.Select(p => p.Name);
			var projectTechs = projects.SelectMany(p => p.Tech.Split(", ")).Distinct();
			var projectTypes = projects.SelectMany(p => p.Type.Split(", ")).Distinct();

			autoCompleteList = projectNames.Concat(projectTechs).Concat(projectTypes).ToList();

			this.loading = false;
			this.StateHasChanged();
		}
	}

	private void RowClickEvent(TableRowClickEventArgs<Project> tableRowClickEventArgs)
	{
		if (this.selectedProject != tableRowClickEventArgs.Item)
		{
			this.selectedProject = tableRowClickEventArgs.Item;
		}

		this.Navigation.NavigateTo($"{Routes.Pages.Projects}/{this.selectedProject.ID}");
	}

	private async Task<IEnumerable<string>> AutoCompleteSearch(string input)
	{
		if (string.IsNullOrWhiteSpace(input))
			return new List<string>();

		return autoCompleteList.Where(x => x.Contains(input, StringComparison.InvariantCultureIgnoreCase));
	}

	private bool FilterFunc(Project p)
	{
		if (string.IsNullOrWhiteSpace(filterString))
			return true;

		string s = filterString.Trim().ToLower();

		string itemData = p.Name.ToLower()
						+ (p.Tech?.ToLower() ?? "")
						+ (p.Type?.ToLower() ?? "");

		if (itemData.Contains(s))
			return true;

		return false;
	}

	private async Task OnDeleteClicked(Project p)
	{

		bool? shouldDelete = await this.Dialog.ShowMessageBox(
			"Delete",
			$"Delete {p.Name}. \n\nAre you sure?",
			yesText: "Delete", cancelText: "Cancel");

		if (shouldDelete == true)
		{
			try
			{
				await this.Http.CustomDeleteAsync(Routes.Api.Projects + p.ID);
			}
			catch (Exception e)
			{
				this.Snackbar.Add(e.Message, Severity.Error);
			}
			finally
			{
				await this.LoadProjectsList();
			}
		}

	}
}
