@inherits CustomComponentBase

@if (Project == null)
{
	<MudProgressCircular Indeterminate=true Color="Color.Primary" />
}
else
{
	<div>
		<MudCarousel Class="project-carousel"
				 ShowArrows="true"
				 ShowBullets="true"
				 Style="@($"background-color:{Colors.Yellow.Default}")"
				 EnableSwipeGesture="true"
				 AutoCycle="false"
				 TData="object">
			@foreach (var img in Project.Images.OrderByDescending(i => i.PrimaryImage == 1).ToList())
			{
				<MudCarouselItem Transition="Transition.Fade" Color="@Color.Default">
					<div class="d-flex text-center carousel-image">
						<MudImage Fluid
						  Src="@($"/{Routes.Api.ProjectImage_AsObject}{img.ID}")"
						  ObjectFit="ObjectFit.Contain"
						  ObjectPosition="ObjectPosition.Center" />

						@if (this.AppStateContainer.IsAdmin)
						{
							<div id="image-edit-btns">
								@if (img.PrimaryImage != 1)
								{
									<MudButton Size="Size.Small"
							   ButtonType="ButtonType.Button"
							   Style="@($"background-color:{Colors.Blue.Default};color:{Colors.Shades.White}")"
							   OnClick="() => SetPrimaryImage(img)">
										Make main image
									</MudButton>

								}
								<MudButton Size="Size.Small"
							   ButtonType="ButtonType.Button"
							   Style="@($"background-color:{Colors.Red.Default};color:{Colors.Shades.White}")"
							   OnClick="() => DeleteImage(img)">
									Delete
								</MudButton>
							</div>
						}
					</div>
				</MudCarouselItem>
			}
		</MudCarousel>

		<ProjectInfoSection Project="Project" />

		<div class="project-description">
			<div class="project-description-title">
				<h1>@Project.Name</h1>
			</div>
			@((MarkupString)(Project.Description ?? ""))
		</div>
	</div>
}

@code {
	[Parameter]
	public Project Project { get; set; }

	private async Task DeleteImage(ProjectImage img)
	{
		bool? shouldDelete = await this.Dialog.ShowMessageBox(
			"Delete",
			$"Delete image. \n\nAre you sure?",
			yesText: "Delete", cancelText: "Cancel");

		if (shouldDelete == true)
		{
			try
			{
				await this.Http.CustomDeleteAsync(Routes.Api.ProjectImages + img.ID);

				this.Project.Images = this.Project.Images.Where(i => i.ID != img.ID).ToList();

				this.StateHasChanged();
			}
			catch (Exception e)
			{
				this.Snackbar.Add(e.Message, Severity.Error);
			}

		}
	}

	private async Task SetPrimaryImage(ProjectImage img)
	{
		try
		{
			var resp = await this.Http.PostAsync(Routes.Api.ProjectImages_SetMainImage + img.ID, null);

			var apiResponse = await resp.Content.ReadFromJsonAsync<ApiResponse>();

			if (apiResponse == null)
				throw new Exception("ApiResponse is null!");

			if (apiResponse.Ok)
			{
				this.Project.Images.ForEach(_img =>
				{
					_img.PrimaryImage = 0;
					if (_img.ID == img.ID)
					{
						_img.PrimaryImage = 1;

					}
				});

				this.StateHasChanged();
			}
			else
			{
				this.Snackbar.Add(apiResponse.Error, Severity.Error);
			}
		}
		catch (Exception e)
		{
			this.Snackbar.Add(e.Message, Severity.Error);

		}
	}
}
